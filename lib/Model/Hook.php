<?php
/**
 * Hook
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Meltwater Streaming API v2
 *
 * The Meltwater Streaming API provides the needed resources for Meltwater clients to create & delete REST Hooks and stream Meltwater search results to your specified destination.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@api.meltwater.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Hook Class Doc Comment
 *
 * @category    Class
 * @description Creates a hook for one of your predefined searches.  Delivers search results for the query referenced by the &#x60;search_id&#x60; to the &#x60;target_url&#x60; via HTTP POST. Note that a &#x60;hook_id&#x60; will be returned on successful creation, this id is needed to delete the hook.   We are also returning the header: &#x60;X-Hook-Secret&#x60;, a shared secret used to sign the document body pushed to your &#x60;target_url&#x60;.    Requires an OAuth access token.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Hook implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Hook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'search_id' => 'int',
        'target_url' => 'string',
        'updated' => 'string',
        'search_type' => 'string',
        'hook_id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'search_id' => 'search_id',
        'target_url' => 'target_url',
        'updated' => 'updated',
        'search_type' => 'search_type',
        'hook_id' => 'hook_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'search_id' => 'setSearchId',
        'target_url' => 'setTargetUrl',
        'updated' => 'setUpdated',
        'search_type' => 'setSearchType',
        'hook_id' => 'setHookId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'search_id' => 'getSearchId',
        'target_url' => 'getTargetUrl',
        'updated' => 'getUpdated',
        'search_type' => 'getSearchType',
        'hook_id' => 'getHookId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['search_id'] = isset($data['search_id']) ? $data['search_id'] : null;
        $this->container['target_url'] = isset($data['target_url']) ? $data['target_url'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['search_type'] = isset($data['search_type']) ? $data['search_type'] : null;
        $this->container['hook_id'] = isset($data['hook_id']) ? $data['hook_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets search_id
     * @return int
     */
    public function getSearchId()
    {
        return $this->container['search_id'];
    }

    /**
     * Sets search_id
     * @param int $search_id Search id
     * @return $this
     */
    public function setSearchId($search_id)
    {
        $this->container['search_id'] = $search_id;

        return $this;
    }

    /**
     * Gets target_url
     * @return string
     */
    public function getTargetUrl()
    {
        return $this->container['target_url'];
    }

    /**
     * Sets target_url
     * @param string $target_url The URL that results from the search will be posted to
     * @return $this
     */
    public function setTargetUrl($target_url)
    {
        $this->container['target_url'] = $target_url;

        return $this;
    }

    /**
     * Gets updated
     * @return string
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param string $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets search_type
     * @return string
     */
    public function getSearchType()
    {
        return $this->container['search_type'];
    }

    /**
     * Sets search_type
     * @param string $search_type The type of search the hook is for
     * @return $this
     */
    public function setSearchType($search_type)
    {
        $this->container['search_type'] = $search_type;

        return $this;
    }

    /**
     * Gets hook_id
     * @return string
     */
    public function getHookId()
    {
        return $this->container['hook_id'];
    }

    /**
     * Sets hook_id
     * @param string $hook_id
     * @return $this
     */
    public function setHookId($hook_id)
    {
        $this->container['hook_id'] = $hook_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


